%h1 IGV
= action_parameters do
  - input :evolution, :text, "Bundle path or key name"
  - input :chromosome, :string, "Chromosome to consider"
  - input :variant_caller, :string, "Variant caller to use", :mutect2
  - input :reference_type, :select, "Reference type", :bundle, :select_options => %w(bundle hg38 b37)
 
- if defined?(evolution) && defined?(variant_caller)
  - chromosome = nil unless defined? chromosome
  - Workflow.require_workflow "Sample"
  - eval_bundle = HTSBenchmark.job(:eval_population, nil, :evolution => evolution, :variant_caller => variant_caller, :reference_type => reference_type, :chromosome => chromosome)
  - log :eval_bundle, "Producing bundle evaluation"
  - Workflow::Orchestrator.process eval_bundle unless eval_bundle.done?

  - tumor_bam_job = eval_bundle.recursive_inputs[:tumor]
  - raise "Job not done" unless tumor_bam_job.done?
  - tumor_bam = tumor_bam_job.path

  - normal_bam_job = eval_bundle.recursive_inputs[:normal]
  - if normal_bam_job.done?
    - normal_bam = normal_bam_job.path

  - reference = tumor_bam_job.recursive_inputs["reference"]
  - reference = 'hg19' if reference == 'b37'

  %dl
    %dt tumor_bam
    %dd= tumor_bam
    %dt normal_bam
    %dd= tumor_bam

  = tool :IGV_js, :tumor_bam => tumor_bam, :normal_bam => normal_bam, :reference_code => reference

  %h3 Results
  = table do
    - eval_bundle.load

  %h3 False negatives
  = table do
    - Sequence.job(:expanded_vcf, nil, :vcf_file => eval_bundle.file('output/fn.vcf.gz')).run

  %h3 False positives
  = table do
    - Sequence.job(:expanded_vcf, nil, :vcf_file => eval_bundle.file('output/fp.vcf.gz')).run

  %h3 True positives
  = table do
    - Sequence.job(:expanded_vcf, nil, :vcf_file => eval_bundle.file('output/tp.vcf.gz')).run
  - if eval_bundle.step(:stage_bundle).file('work/truth/evolution.yaml').exist?
    - evolution = YAML.load eval_bundle.step(:stage_bundle).file('work/truth/evolution.yaml').read
    %h3 Evolution
    - require 'rbbt/rest/common/tabs'
    = tabs do |t|
      - evolution.each_with_index do |clone,i|
        - t.add "Clone #{i}" do
          %h5 Parent #{clone[:parent]}
          %h5 SVs
          %ul
            - clone[:SVs].sort.each do |sv|
              %li=sv * ":"
          %h5 Mutations
          %ul
            - clone[:mutations].sort.each do |mutation|
              %li=mutation

